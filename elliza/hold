; (load "af.lisp")

(defparameter *sentences*
  '(
    "The animals' disillusionment implies that idealistic visions of change are often thwarted by practical realities and human (or animal) nature."
    ))

(defparameter *entities*
    '(
      (farm manor)
      orwell
      (pigs pig)
      (animals animal)
      napoleon
      snowball
      (dogs dog)
      major
      moses
      crow
      (church)
      marx
      bishops
      priests
      laity
      rebellion
      jones
      pilkington
      squealer
      boxer
      (puppies puppy)
      (working workers worker)
      (commandment commandments)
      revolution
      (soviet union)
      windmill
      (glue factory)
      (sugarcandy mountain)
      napoleon
      (house farmhouse)
      (humans human people)
      bed
      ))

(defvar *w->s* (make-hash-table :test #'equal))

(defparameter *stop-words*
  '(|1900S| ;; Special for 1984
    ;; Added from Animal Farm text:
    a an at and are all as be meaning
    ;; From some random thing I found on github
    about anything
    beforehand begin beginning beginnings begins behind being believe
    below beside besides best better between beyond bi
    bill biol bj bk bl bn both bottom
    bp br brief briefly bs bt bu but
    bx by c c1 c2 c3 ca call
    came can cannot cant can't cause causes cc
    cd ce certain certainly cf cg ch changes
    ci cit cj cl clearly cm c'mon cn
    co com come comes con concerning consequently consider
    considering contain containing contains corresponding could couldn couldnt
    couldn't course cp cq cr cry cs c's
    ct cu currently cv cx cy cz d
    d2 da date dc dd de definitely describe
    described despite detail df di did didn didn't
    different dj dk dl do does doesn doesn't
    doing don done don't down downwards dp dr
    ds dt du due during dx dy e
    e2 e3 ea each ec ed edu ee
    ef effect eg ei eight eighty either ej
    el eleven else elsewhere em empty en end
    ending enough entirely eo ep eq er es
    especially est et et-al etc eu ev even
    ever every everybody everyone everything everywhere ex exactly
    example except ey f f2 fa far fc
    few ff fi fifteen fifth fify fill find
    fire first five fix fj fl fn fo
    followed following follows for former formerly forth forty
    found four fr from front fs ft fu
    full further furthermore fy g ga gave ge
    get gets getting gi give given gives giving
    gj gl go goes going gone got gotten
    gr greetings gs gy h h2 h3 had
    hadn hadn't happens hardly has hasn hasnt hasn't
    have haven haven't having he hed he'd he'll
    hello help hence her here hereafter hereby herein
    heres here's hereupon hers herself hes he's hh
    hi hid him himself his hither hj ho
    home hopefully how howbeit however how's hr hs
    http hu hundred hy i i2 i3 i4
    i6 i7 i8 ia ib ibid ic id
    i'd ie if ig ignored ih ii ij
    il i'll im i'm immediate immediately importance important
    in inasmuch inc indeed index indicate indicated indicates
    information inner insofar instead interest into invention inward
    io ip iq ir is isn isn't it
    itd it'd it'll its it's itself iv i've
    ix iy iz j jj jr js jt
    ju just k ke keep keeps kept kg
    kj km know known knows ko l l2
    la largely last lately later latter latterly lb
    lc le least les less lest let lets
    let's lf like liked likely line little lj
    ll ll ln lo look looking looks los
    lr ls lt ltd m m2 ma made
    mainly make makes many may maybe me mean
    means meantime meanwhile merely mg might mightn mightn't
    mill million mine miss ml mn mo more
    moreover most mostly move mr mrs ms mt
    mu much mug must mustn mustn't my myself
    n n2 na name namely nay nc nd
    ne near nearly necessarily necessary need needn needn't
    needs neither never nevertheless new next ng ni
    nine ninety nj nl nn no nobody non
    none nonetheless noone nor normally nos not noted
    nothing novel now nowhere nr ns nt ny
    o oa ob obtain obtained obviously oc od
    of off often og oh oi oj ok
    okay ol old om omitted on once one
    ones only onto oo op oq or ord
    os ot other others otherwise ou ought our
    ours ourselves out outside over overall ow owing
    own ox oz p p1 p2 p3 page
    pagecount pages par part particular particularly pas past
    pc pd pe per perhaps pf ph pi
    pj pk pl placed please plus pm pn
    po poorly possible possibly potentially pp pq pr
    predominantly present presumably previously primarily probably promptly proud
    provides ps pt pu put py q qj
    qu que quickly quite qv r r2 ra
    ran rather rc rd re readily really reasonably
    recent recently ref refs regarding regardless regards related
    relatively research research-articl respectively resulted resulting results rf
    rh ri right rj rl rm rn ro
    rq rr rs rt ru run rv ry
    s s2 sa said same saw say saying
    says sc sd se sec second secondly section
    see seeing seem seemed seeming seems seen self
    selves sensible sent serious seriously seven several sf
    shall shan shan't she shed she'd she'll shes
    she's should shouldn shouldn't should've show showed shown
    showns shows si side significant significantly similar similarly
    since sincere six sixty sj sl slightly sm
    sn so some somebody somehow someone somethan something
    sometime sometimes somewhat somewhere soon sorry sp specifically
    specified specify specifying sq sr ss st still
    stop strongly sub substantially successfully such sufficiently suggest
    sup sure sy system sz t t1 t2
    t3 take taken taking tb tc td te
    tell ten tends tf th than thank thanks
    thanx that that'll thats that's that've the their
    theirs them themselves then thence there thereafter thereby
    thered therefore therein there'll thereof therere theres there's
    thereto thereupon there've these they theyd they'd they'll
    theyre they're they've thickv thin think third this
    thorough thoroughly those thou though thoughh thousand three
    throug through throughout thru thus ti til tip
    tj tl tm tn to together too took
    top toward towards tp tq tr tried tries
    truly try trying ts t's tt tv twelve
    twenty twice two tx u u201d ue ui
    uj uk um un under unfortunately unless unlike
    unlikely until unto uo up upon ups ur
    us use used useful usefully usefulness uses using
    usually ut v va value various vd ve
    ve very via viz vj vo vol vols
    volumtype vq vs vt vu w wa want
    wants was wasn wasnt wasn't way we wed
    we'd welcome well we'll well-b went were we're
    weren werent weren't we've what whatever what'll whats
    what's when whence whenever when's where whereafter whereas
    whereby wherein wheres where's whereupon wherever whether which
    while whim whither who whod whoever whole who'll
    whom whomever whos who's whose why why's wi
    widely will willing wish with within without wo
    won wonder wont won't words world would wouldn
    wouldnt wouldn't www x x1 x2 x3 xf
    xi xj xk xl xn xo xs xt
    xv xx y y2 yes yet yj yl
    you youd you'd you'll your youre you're yours
    yourself yourselves you've yr ys yt z zero
    zi zz
    ))

(defvar *n-sentences* (length *sentences*))

;;; Priority is given by the number of sentence associated with this
;;; word with respect to the total number of sentences, scaled from 0
;;; to 10, with higher numbers being higher priority, so words
;;; associated with lots of sentences should have lower numbers.

(defun priority (s*)
  (truncate (* 10 (/ (- *n-sentences* (length s*)) *n-sentences*))))

(defvar *fixed-scripts-components*
  "
(THINK 10
    ((0 THINK THAT 0)
     (THAT 4 IT INTERESTING. CAN I ANSWER ANY QUESTIONS ABOUT IT?)
     (I HAD NOT THOUGHT THAT 4. MAYBE YOU HAVE QUESTIONS ABOUT IT.)
     (IF IT IS TRUE THAT 4 THAT MIGHT BRING UP OTHER QUESTIONS YOU CAN ASK.)
    ))

(MEMORY THINK
    (0 THINK 0 = BEFORE YOU SAID YOU THOUGHT 3. THAT'S AN INTERESTING THOUGHT. CAN I ANSWER ANY QUESTIONS ABOUT IT?)
    (0 THINK 0 = BEFORE YOU SAID YOU THOUGHT 3. I HAD NOT THOUGHT ABOUT THAT. ARE THERE QUESTIONS YOU HAVE ABOUT IT?)
    (0 THINK 0 = BEFORE YOU SAID YOU THOUGHT 3. IF THAT IS TRUE IT MIGHT BRING UP OTHER QUESTIONS YOU CAN ASK.)
    (0 THINK 0 = WHAT OTHER QUESTIONS DO YOU HAVE ABOUT YOUR PREVIOUS THOUGHT THAT 3?)
    )
(NONE
    ((0)
        (ASK ME SOMETHING ELSE ABOUT ANIMAL FARM.)
        (ANYTHING ELSE YOU WANT TO KNOW ABOUT ANIMAL FARM?)
        (WHAT ELSE WOULD YOU LIKE TO KNOW ABOUT ANIMAL FARM?)
        (DO YOU FEEL STRONGLY ABOUT DISCUSSING ANIMAL FARM?)))
"
  )

(defun ellizagen (&aux *PRINT-LENGTH* *PRINT-PRETTY*)
  (setf *sentences* (mapcar #'s->w* *sentences*))
  (clrhash *w->s*)
  (with-open-file
      (o "af.script" :if-exists :supersede :direction :output)
    (format o "(Hi! Let's talk about animal farm! What do you want to know?)~%~%")
    (loop for w* in *sentences*
	  do (loop for w in w*
		   unless (member w *stop-words*)
		   do (push w* (gethash w *w->s*))))
    (loop for w being the hash-keys of *w->s*
	  using (hash-value s*)
	  do (format o "(~a ~a~%    ((0 ~s 0)~%"
		     w (priority s*) w)
	  (loop for s in s*
		do (format o "   ~s~%" (append s (random-discourse-continuation))))
	  (format o "~%   ))~%")
	  )
    (format o "~a~%" *fixed-scripts-components*)
    ))

;;; This will return nil half the time, which you can adjust by
;;; changing the random const.

(defun random-discourse-continuation ()
  (nth (random 6)
       '((WHAT DO YOU THINK ABOUT THAT?)
	 (DO YOU HAVE ANY INTERESTING THOUGHTS ABOUT THAT?)
	 (WHAT OTHER QUESTIONS DOES THAT BRING TO MIND?))))

(defun s->w* (s)
  (mapcar #'read-from-string
	  (mapcar #'(lambda (w) (string-trim ",;'-.:" w))
		  (string-split s))))

(defun string-split (string &key (delimiter #\space) (convert-num-values? nil))
  "Split string into substrings delimited by delimiter"
  (let ((substrings '())
        (length (length string))
        (last 0))
    (flet ((add-substring 
	    (i)
	    (push (subseq string last i)
		  substrings)))
	  (dotimes (i length)
	    (when (eq (char string i) delimiter)
	      (add-substring i)
	      (setq last (1+ i))))
	  (add-substring length)
	  (let ((substrings (nreverse substrings)))
	    (if convert-num-values?
		(loop for string in substrings
		      as v = (ignore-errors (read-from-string string))
		      if (numberp v)
		      collect v
		      else 
		      collect string)
	      substrings)))))

(ellizagen)
